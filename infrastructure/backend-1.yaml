AWSTemplateFormatVersion: '2010-09-09'
Description: Pila del servidor para el backend nº1

Parameters:

  InstanceType:
    Description: Parametro para seleccionar el tipo de instancia EC2
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.large
      - t2.medium
      - t2.small
      - t2.micro
      - t2.nano

  InstanceImage:
    Description: Parametro para seleccionar la AMI Ubuntu 22.04
    Type: String
    Default: "ami-0f9de6e2d2f067fca"
  
  InstanceKeyName:
    Description: Parametro para seleccionar el KeyName de la Instancia
    Type: String
    Default: "vockey"
  
  HostedZoneName:
    Type: String
    Description: Nombre del dominio para la zona hospedada en Route 53
    Default: "chefmate"


Resources:

  BackendDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId:
        Fn::ImportValue: "HostedZone"
          
      RecordSets:
        - Name: !Sub "be1.${HostedZoneName}."
          Type: A
          TTL: '900'
          ResourceRecords:
            - !GetAtt Backend.PrivateIp

  Backend:
    Type: "AWS::EC2::Instance"
    Description: Servidor del Backend nº1
    Properties:
      Tags:
        - Key: "Name"
          Value: "be1"
      ImageId: !Ref InstanceImage
      InstanceType: !Ref InstanceType 
      KeyName: !Ref InstanceKeyName
      SecurityGroupIds: 
        - Fn::ImportValue:
            !Sub "http-sg"
        - Fn::ImportValue:
            !Sub "ssh-sg"
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          exec > /tmp/userdata.log 2>&1

          #====================================================================#
          #----------------------> PREPARAR SERVIDOR <-------------------------#
          #====================================================================#

          # Actualizar la lista de paquetes de la instancia
          apt update 
          apt upgrade -y

          # Instalar git y curl
          apt install -y git unzip curl

          # Instalar docker y habilitarlo
          apt-get install  curl apt-transport-https ca-certificates software-properties-common -y
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
          add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          apt update 
          apt install docker-ce -y
          systemctl enable docker
          systemctl start docker

          # Clonar repositorio de ChefMate
          cd /home/ubuntu
          git clone https://@github.com/FranciscoJavierCabelloRueda/Chefmate.git chefmate
          chown -R ubuntu:ubuntu /home/ubuntu/chefmate

          #=====================================================================#
          #----------------------> CREAR ARCHIVO .ENV <-------------------------#
          #=====================================================================#
          
          cd /home/ubuntu/chefmate/laravel-backend

          # Crea el archivo .env con la configuración de entorno de producción
          cat <<EOF > .env
          APP_NAME=ChefMate-Internal
          APP_ENV=production
          APP_KEY=base64:ME1YlkCeOqHqaDyxj+Xdls+2xx6Ax0tIt2d5tzXvKMU=
          APP_DEBUG=true
          APP_URL=http://chefmate-internal.duckdns.org

          APP_LOCALE=es
          APP_FALLBACK_LOCALE=es
          APP_FAKER_LOCALE=es_ES

          APP_MAINTENANCE_DRIVER=file

          PHP_CLI_SERVER_WORKERS=4

          BCRYPT_ROUNDS=12

          LOG_CHANNEL=stack
          LOG_STACK=single
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=debug

          DB_CONNECTION=mysql
          DB_HOST=db.chefmate
          DB_PORT=3306
          DB_DATABASE=chefmate
          DB_USERNAME=chefmate_user
          DB_PASSWORD=chefmate_password

          SESSION_DRIVER=file
          SESSION_LIFETIME=120
          SESSION_ENCRYPT=false
          SESSION_PATH=/
          SESSION_DOMAIN=null

          BROADCAST_CONNECTION=log
          FILESYSTEM_DISK=local
          QUEUE_CONNECTION=database

          CACHE_STORE=database

          MEMCACHED_HOST=127.0.0.1

          REDIS_CLIENT=phpredis
          REDIS_HOST=127.0.0.1
          REDIS_PASSWORD=null
          REDIS_PORT=6379

          MAIL_MAILER=log
          MAIL_SCHEME=null
          MAIL_HOST=127.0.0.1
          MAIL_PORT=2525
          MAIL_USERNAME=null
          MAIL_PASSWORD=null
          MAIL_FROM_ADDRESS="hello@example.com"
          MAIL_FROM_NAME="Laravel"

          AWS_ACCESS_KEY_ID=
          AWS_SECRET_ACCESS_KEY=
          AWS_DEFAULT_REGION=us-east-1
          AWS_BUCKET=
          AWS_USE_PATH_STYLE_ENDPOINT=false

          VITE_APP_NAME="Chefmate"
          EOF

          # Asigna permisos del archivo .env al usuario ubuntu
          chown ubuntu:ubuntu .env

          #====================================================================#
          #----------------------> LANZAR CONTENEDOR <-------------------------#
          #====================================================================#
          cd /home/ubuntu/chefmate
          docker build -t laravel-prod -f laravel-backend/Dockerfile laravel-backend

          # Construye la imagen Docker para Laravel, usando el Dockerfile que está en la carpeta laravel-backend
          docker run -d \
            --name laravel-prod \
            -p 80:80 \
            -v /home/ubuntu/chefmate/laravel-backend:/var/www/html \
            -e APACHE_DOCUMENT_ROOT=/var/www/html/public \
            laravel-prod

          # OBSEVACIÓN: Algunos comandos de los siguientes también estan el el Dockerfile, se repiten poque por algún motivo no se ejecutan 

          # Instala las dependencias PHP dentro del contenedor con Composer
          docker exec laravel-prod composer install --no-interaction --prefer-dist --optimize-autoloader

          # Instala Node.js dentro del contenedor para compilar assets
          docker exec laravel-prod apt-get install -y nodejs

          # Instala dependencias de JavaScript 
          docker exec laravel-prod sh -c "cd /var/www/html && npm install"

          # Ajusta permisos para que Apache pueda acceder a estas carpetas
          docker exec laravel-prod chown -R www-data:www-data storage bootstrap/cache
          docker exec laravel-prod chmod -R 775 storage bootstrap/cache

          # Compila los assets de Laravel
          docker exec laravel-prod sh -c "cd /var/www/html && npm run build"

          #====================================================================#
          #------------------> LANZAR MIGRACIONES Y SEEDS <--------------------#
          #====================================================================#

          # Genera la clave de aplicación Laravel (APP_KEY)
          docker exec laravel-prod php artisan key:generate

          # Crea las tabalas de la base de datos
          docker exec laravel-prod php artisan migrate:refresh --force

          # Ejecuta los seeders definidos
          docker exec laravel-prod php artisan db:seed --force

          # Enlace al almacenamiento de Laravel
          docker exec laravel-prod php artisan storage:link

Outputs:

  Backend:
    Value: !GetAtt Backend.PrivateIp
    Export:
      Name: be1